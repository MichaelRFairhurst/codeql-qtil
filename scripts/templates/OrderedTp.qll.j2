/**
 * GENERATED CODE. DO NOT MODIFY.
 */
private import qtil.parameterization.SignatureTypes
private import qtil.fn.FnTypes
private import qtil.fn.Ordering

{% for module in modules %}
{% set arity = module.arity %}
{% set types = module.types %}

module OrdTp{{ arity }}<
    {{ types | map(attribute='typedecl') | join(', ') }},
    TpType{{ arity }}<{{ types | map(attribute='name') | join(', ') }}>::tp/{{arity}} tp,
    Ordering{{ arity }}<{{ types | map(attribute='name') | join(', ') }}>::Sig Ord
> {
  int maxRank() {
    result = max(Ord::getRank({{ types | map(attribute='_') | join(', ') }}))
  }

  private int minRank() {
    result = min(Ord::getRank({{ types | map(attribute='_') | join(', ') }}))
  }

  predicate maxTup({{ types | map(attribute='vardecl') | join(', ') }}) {
    maxRank() = Ord::getRank({{ types | map(attribute='varname') | join(', ') }})
  }

  predicate minTup({{ types | map(attribute='vardecl') | join(', ') }}) {
    minRank() = Ord::getRank({{ types | map(attribute='varname') | join(', ') }})
  }

  {# Todo: support map and filter, maybe everything else from TpX ... #}
  {# Todo: indexOf ? #}
  {# Todo: support reduce and foldl #}
  {# Todo: use denserank to prevent bugs? #}
  {# Todo: concat? #}
  {# Todo: list operations like append, appendAll? #}

  module Fold<InfiniteStringableType R,
      FnType{{ arity + 1 }}<R, R, {{ types | map(attribute='name') | join (', ') }}>::fn/{{ arity + 1 }} agg,
      FnType0<R>::fn/0 init
  > {
    private R step(int rank_) {
      if rank_ = minRank() - 1
      then result = init()
      else exists({{ types | map(attribute='vardecl') | join(', ') }} |
        rank_ = Ord::getRank({{ types | map(attribute='varname') | join (', ')}}) and
        result = agg(step(rank_ - 1), {{ types | map(attribute='varname') | join(', ') }})
      )
    }
  }
}

{% endfor %}